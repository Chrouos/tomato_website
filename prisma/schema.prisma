generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          String        @id
  user_id     String?       @db.Uuid
  label       String
  is_default  Boolean       @default(false)
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  daily_tasks daily_tasks[]
  todos       todos[]

  @@index([user_id])
}

model daily_task_completions {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  daily_task_id String      @db.Uuid
  completed_on  DateTime    @db.Date
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  daily_tasks   daily_tasks @relation(fields: [daily_task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([daily_task_id, completed_on])
}

model daily_tasks {
  id                     String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id                String                   @db.Uuid
  title                  String
  category_id            String?
  archived               Boolean                  @default(false)
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  updated_at             DateTime                 @default(now()) @updatedAt @db.Timestamptz(6)
  daily_task_completions daily_task_completions[]
  categories             categories?              @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users                  users                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
}

model email_verification_codes {
  email      String   @id
  code_hash  String
  expires_at DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
}

model session_events {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String   @db.Uuid
  session_key String?
  event_type  String
  payload     Json?
  occurred_at DateTime @default(now()) @db.Timestamptz(6)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_key])
  @@index([user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains an index with non-default null sort order and requires additional setup for migrations. Visit https://pris.ly/d/default-index-null-ordering for more info.
model sessions {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id          String    @db.Uuid
  duration_seconds Int
  category_id      String?
  category_label   String?
  started_at       DateTime? @db.Timestamptz(6)
  completed_at     DateTime? @db.Timestamptz(6)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([completed_at(sort: Desc)])
  @@index([user_id])
}

model todos {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String      @db.Uuid
  title        String
  category_id  String?
  completed    Boolean     @default(false)
  completed_at DateTime?   @db.Timestamptz(6)
  archived     Boolean     @default(false)
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)
  due_at       DateTime?   @db.Timestamptz(6)
  categories   categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users        users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
}

model users {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String           @unique
  name           String
  password_hash  String?
  provider       String           @default("local")
  provider_id    String?
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  categories     categories[]
  daily_tasks    daily_tasks[]
  session_events session_events[]
  sessions       sessions[]
  todos          todos[]

  @@unique([provider, provider_id], map: "users_provider_id_idx")
}
